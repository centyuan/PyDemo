# 1、查看CPU个数：
lscpu
# 2、查看CPU进程数、核数：
cat /proc/cpuinfo
cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l  # 查看物理cpu个数
cat /proc/cpuinfo| grep "cpu cores"| uniq                 # 查看每个物理CPU中core的个数(即核数)
cat /proc/cpuinfo| grep "processor"| wc -l                # 逻辑CPU的个数(线程数)
# 3、查看内存总量：
free -m
# 4、查看磁盘挂载情况:
lsblk
# 5、查看磁盘分区情况：
fdisk -l
# 6、查看磁盘:
df -h  # disk free以磁盤分区为单位查看文件系统
du -ah # 显示文件或目录的大小 --max-depth=1 
cat test |sort|uniq -u  # -u仅显示不重复的,-d仅显示重复的
### 找出系统最大的前十个文件 https://linux.cn/article-9495-1.html
# find 的输出是文件名加一个换行符du 接受这个输入时会出现问题，我们需要用 -print0 选项把 find 输出的换行符改成 \0，
# 这个大家很熟悉吧，字符串的结束标志，再配合用 xargs 将其分割成小块传给 du 命令
find / -type f -print0 | xargs -O du -h |sort -rh|head -n 10
find / -type f -exec du -Sh {} + | sort -rh | head -n 10


# 7.查看Linux内核版本命令
 cat /proc/version
 uname -a
# 8. 查看Linux发现版
 lsb_release -a
 cat /etc/redhat-release  # 只适合Redhat系的Linux
 cat /etc/issue

# 9.查看物理CPU个数和型号
# cut:-d:(表示以:分割)，-f2(-f配合-d去第2部分);# uniq -c(去重,-c显示有多少重复的)
cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c

# 10.查看单个物理CPU核心数
# wc(-l显示列数-c显示Bytes数-w显示字数) 计算文件的Byte数，字数和列数
# wc testfile
# 3    92    598 testfile
# 行数 单词数 字节数
cat /proc/cpuinfo | grep "physical id" | sort |wc-l

统计项目	统计方式	业务含义
物理CPU的数量	cat /proc/cpuinfo | grep "physical id" | uniq | wc -l	物理机器插槽中CPU的数量4
逻辑处理器数量	cat /proc/cpuinfo | grep "processor" | sort -u | wc -l	processor 0 ~ n - 1 ，其中 n 为逻辑处理器数量
处理器内核数量	cat /proc/cpuinfo | grep "core id" | uniq | wc -l	所有物理CPU上的core的个数总和
处理器内核数量	cat /proc/cpuinfo | grep "cpu cores" | sort | uniq	每个物理CPU中Core的个数
逻辑处理器数量	cat /proc/cpuinfo | grep "siblings" | sort | uniq	每个物理CPU 内包含的逻辑处理器的数量

# 11.内存占用前10
ps aux | head -1;ps auxw | sort -rnk 4 | head -10

# 12.cpu占用前10
ps aux | head -1;ps aux | sort -rnk 3 | head -10

# 13.查看某进程的cpu和内存使用情况
top -p 1081 -H

# 14.显示目录或文件的大小
du -h /home/centyuan
df -h：命令查看了一下磁盘使用情况
df -i：查看了一下/data分区的索引节点(inode)，发现已经用满(IUsed=100%)，导致系统无法创建新目录和文件

# 15.sudo
su切换用户后:在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令
sudo:暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu默认为一次时长15分钟。
sudo -i: 为了频繁的执行某些只有超级用户才能执行的权限，而不用每次输入密码，可以使用该命令。提示输入密码时该密码为当前账户的密码。没有时间限制。执行该命令后提示符变为“#”而不是“$”。想退回普通账户时可以执行“exit”或“logout” 。
su:切换到某某用户模式，提示输入密码时该密码为切换后账户的密码，用法为“su 账户名称”。如果后面不加账户时系统默认为root账户，密码也为超级账户的密码。没有时间限制。

# 16.查看文件命令
cat tac nl more less head tail

# 17.搜索文件命令(whereis which find locate)
find       实际搜寻硬盘查询文件名称(最强大的,可以通过文件的时间戳,文件的权限)
locate     配合数据库查看文件位置(快而全,通过/var/lib/mlocate/mlocate.db数据库查找,每天自动更新一次)
grep  -c "查找字符串" 文件名 或者 grep "查找字符串" 文件名 | wc -l  # 搜索查找匹配的行数
grep  -r "查找字符串" 文件名                                      # 递归搜索某个目录及其子目录所有
grep  -H -r  "查找字符串" 文件名  | cut -d: -f1 | uniq            # 搜素并列出文件名

# 查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件：
locate /etc/sh
which      通常用来确定是否安装指定的软件,因为只从PATH环境变量制定的路径中取搜索命令
whereis    查看可执行文件的位置(搜索很快,从数据库中差,不从硬盘中查,只能搜索二进制文件-b man帮助文件-m,和源代码文件 -s)

# 15.&
&  表示任务在后台执行，如要在后台运行redis-server:redis-server &
&& 表示前一条命令执行成功时，才执行后一条命令:echo '1‘ && echo '2'
|| 表示上一条命令执行失败后，才执行下一条命令，如  cat nofile || echo "fail"
| 表示管道，上一条命令的输出，作为下一条命令参数:echo 'yes' | wc -l
&和nohup 区别:
&:1.结果输出到终端，2.Ctrl+c发送SIGINT信号，程序免疫,3.关闭session发送SIGHUP信号,程序关闭
nohup:1.结果默认输出到nohup.out,2.Ctrl+c发送SIGINT信号,程序关闭,3.关闭session发送SIGHUP信号，程序免疫
不挂断后台运行(nohup $ 同时使用)
nohup python run.py >aceess.log 2>&1  &
nohup python3 -u manage.py runserver 0.0.0.0:8001 > out.log 2>&1 &
# 2>&1 解释：
将标准错误 2 重定向到标准输出 &1 ，在将标准输出 &1 再被重定向输入到 out.log
# 2>1 解释:
表示把标准错误的输出重定向到1，但这个1不是标准输出，而是一个名为1的文件。
# &> 解释:
表示stdout标准输出和stderr错误输出信息，重定向输出，覆盖写。
nohup python manage.py runserver 0.0.0.0:8001 &
rz:上传文件
sz:下载文件

# 16.服务自启三种方式
1.systemd
cd /etc/systemd/system/
vim test.service
***********
[Unit]
Description = test
After=network.target
[Service]
ExecStart=/home/tomcat/jenkins_8093/bin/startup.sh
ExecStop=/home/tomcat/jenkins_8093/bin/shutdown.sh
ExecReload=/bin/kill -s HUP $MAINPID
[Install]
WantedBy=multi-user.target
***********
systemctl enable|disable test.service
(urs/lib/systemd/system/test.service)

2./etc/rc.d/rc.local
vim /etc/rc.d/rc.local
自启命令

3.crontab计划中的@reboot
crontab -e
@reboot /home/test.sh


#17.linux启动过程
1.开机质检(硬件引导):BIOS/UEFI(硬件初始化)
2.内核引导:boot(加载内核)
3.运行init/SystemV/Systemd(pid为1):(7个运行级别)挂载文件系统等
4.系统初始化:rc.d
开机自启的三种方式:
1./etc/rc.local (添加shell到该文件)
2.cd/etc/profile.d/ (添加shell脚本到该目录下)
3./etc/init.d/srs.sh (添加服务systemctl)


docker run --name my_es7 -p 9200:9200  -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms84m -Xmx512m" -v /root/my_elasticsearch/data:/usr/share/elasticsearch/data -d elasticsearch:7


#18.查看端口是否打开
wget ip:port
curl -v ip:port 
telnet ip port 
nc -zv ip port 
ssh -v ip -p port
ssh -v -p port root@ip
lsof -i:port
netstat -lntp 
   -l 列出所有监听端口
   -n 以数字形式显示地址和端口
   -t 列出所有tcp协议连接 -u 列出所有udp连接 -a 列出所有连接
   -p 显示占用该端口的进程
#connection refused 表示端口没有服务监听

#19杀死所有进程 ps j -A查看进程组id
 kill -9 -PGID  # 通过kill向整个进程组发送信号
 killall 进程名  # 通过killall直接对进程名操作
 ps aux | grep '进程名' | awk '{print $2}' | xargs kill

#20环境变量
Linux登录时:
首先启动/etc/profile ,在启动用户目录下:~/.bash_profile,~/.bash_login, ~/.profile,如果~/.bash_profile文件存在的话,一般还会执行~/.bashrc
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi  
执行顺序:/etc/profile→ (~/.bash_profile | ~/.bash_login | ~/.profile)→~/.bashrc →/etc/bashrc
/etc/profile: 对系统内所有用户生效的，并从/etc/profile.d目录的配置文件中搜集shell的设置。
/etc/bashrc: 对每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）
~/.bash_profile: 是针对用户来设定的，交互式、login 方式进入 bash 运行的，意思是只有用户登录时才会生效
~/.bashrc: 交互式 non-login 方式进入 bash 运行的，用户不一定登录，只要以该用户身份运行命令行就会读取该文件

#21ssh命令的三种代理功能
# https://www.cnblogs.com/cangqinglang/p/12732661.html
# https://www.jianshu.com/p/08840b4ac0cb
正向代理(-L):本地启动端口,把本地端口数据转发到远端
1.远程端口映射到其他机器(HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，在 HostB 上运行)
ssh -L 0.0.0.0:PortB:HostC:PortC user@HostC
或者
ssh user@HostB -L 0.0.0.0:PortB:HostC:PortC
ssh user@HostB -fNL 0.0.0.0:PortB:HostC:PortC
-f: 表示本地主机的ssh客户端在后台运行
-N: 表示不执行远程命令，只用于转发端口，及本地主机在登录了192.168.0.3后，不会分配一个tty窗口
-L: 选项表示这是一个本地转发模式，它的参数是 port:host:hostport，对应到这里是4000:192.168.0.3:5000

2.本地端口通过跳板映射到其他机器(HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上，在 HostA 上运行)
ssh -L 0.0.0.0:PortA:HostC:PortC user@HostB 

反向代理(-R):让远端启动端口，把远端端口数据转发到本地
1.HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行
ssh -R HostC:PortC:HostB:PortB  user@HostC

#22 /etc/sudoers 文件
sudo是Linux下常用的允许普通用户使用超级用户权限的工具,用户调用sudo并输入用户密码后，用户获得了一张存活期为5分钟(值可以在编译时候改变)的票

sudo的配置文件为/etc/sudoers,基础配置：
root ALL=(ALL) ALL
用户账号,允许用户从哪些地方连接,运行切换的身份,允许执行的命令

用户或用户组无密码配置:
建议放在最后,以免被其他配置覆盖,导致不生效
hlyuan ALL=(ALL) NOPASSWD:ALL
%hlyuan ALL=(ALL) NOPASSWD:ALL

有限制的命令操作:限制通过passwd修改密码
%hr ALL=(root) !/usr/bin/passwd, !/usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root

