
su切换用户后:在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令
sudo : 暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu默认为一次时长15分钟。
su ： 切换到某某用户模式，提示输入密码时该密码为切换后账户的密码，用法为“su 账户名称”。如果后面不加账户时系统默认为root账户，密码也为超级账户的密码。没有时间限制。
sudo -i: 为了频繁的执行某些只有超级用户才能执行的权限，而不用每次输入密码，可以使用该命令。提示输入密码时该密码为当前账户的密码。没有时间限制。执行该命令后提示符变为“#”而不是“$”。想退回普通账户时可以执行“exit”或“logout” 。

&  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &
&& 表示前一条命令执行成功时，才执行后一条命令 ，如 echo '1‘ && echo '2'
| 表示管道，上一条命令的输出，作为下一条命令参数，如 echo 'yes' | wc -l
|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo "fail"
&和nohup 区别:
&:1.结果输出到终端，2.Ctrl+c发送SIGINT信号，程序免疫,3.关闭session发送SIGHUP信号,程序关闭
nohup:1.结果默认输出到nohup.out,2.Ctrl+c发送SIGINT信号,程序关闭,3.关闭session发送SIGHUP信号，程序免疫
不挂断后台运行(nohup $ 同时使用)
nohup python run.py >aceess.log 2>&1  &
# &> 解释:
表示stdout标准输出和stderr错误输出信息，重定向输出，覆盖写。
# 2>&1 解释：
将标准错误 2 重定向到标准输出 &1 ，在将标准输出 &1 再被重定向输入到 gunicorn.log
# 2>1 解释:
表示把标准错误的输出重定向到1，但这个1不是标准输出，而是一个名为1的文件。

# 远程复制命令
scp:
scp -r local_folder remote_username@remote_ip:remote_folder #本地到远程
scp remote_username@remote_ip:remote_folder local_folder #远程到本地

curl -d "subject=邮件报警测试&message=这是一个邮件测试2&to_email=cent_yuan@163.com"   http://127.0.0.1:8000/api/sendmail/
nohup python manage.py runserver 0.0.0.0:8001 &

# 查看文件命令(cat tac nl more less head tail)
cat -n passwd 参数显示行号
head 只查看文件头几行,默认10行
tail 相反显示文件的最后10行
tail -f 这个参数可以不停的读取某个文件内容并显示,可以让我们动态查看日志.

# 搜索文件命令(whereis which find locate)

whereis    查看可执行文件的位置(搜索很快,从数据库中差,不从硬盘中查,只能搜索二进制文件-b man帮助文件-m,和源代码文件 -s)
locate     配合数据库查看文件位置(快而全,通过/var/lib/mlocate/mlocate.db数据库查找,每天自动更新一次)
它可以用来查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件：
locate /etc/sh
which      通常用来确定是否安装指定的软件,因为只从PATH环境变量制定的路径中取搜索命令
find          实际搜寻硬盘查询文件名称(最强大的,可以通过文件的时间戳,文件的权限)
usage: find [path]

# 显示目录或文件的大小
du
usage: du -h /home/centyuan
df -h


cut /etc/passwd -d ':' -f 1,6
#$ 打印/etc/passwd文件中以:为分隔符的第1个字段和第6个字段分别表示用户名和其家目
#cut 打印每一行的某个字段
wc /etc/passwd
#用于统计并输出一个文件中行,单词,字节的数目.简单小巧的计数工具
sort
uniq
grep

sed
Linux sed 命令是利用脚本来处理文本文件,sed 可依照脚本的指令来处理、编辑文本文件。

主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。
sed -i 's/beitihuan/tihuan/ file #替换


awk
awk所有的操作都是基于pattern(模式)—action(动作)对来完成的，如下面的形式：
pattern {action}
它将所有的动作操作用一对{}花括号包围起来。其中pattern通常是表示用于匹配输入的文本的“关系式”或“正则表达式”，action则是表示匹配后将执行的动作。在一个完整awk操作中，这两者可以只有其中一个，如果没有pattern则默认匹配输入的全部文本，如果没有action则默认为打印匹配内容到屏幕。


硬链接
一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。但是，Unix/Linux系统允许，多个文件名指向同一个inode号码。这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文件名，不影响另一个文件名的访问。这种情况就被称为"硬链接"（hard link）。


ln命令可以创建硬链接：
ln 源文件 目标文件
运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。

这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项："."和".."。前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的“硬链接”和当前目录下的".硬链接“。
软链接
除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号链接（symbolic link）。

这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such file or directory"。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是文件B的inode号码，文件B的inode"链接数"不会因此发生变化。

ln -s命令可以创建软链接。
ln -s 源文文件或目录 目标文件或目录
用df -h命令查看了一下磁盘使用情况
用df -i查看了一下/data分区的索引节点(inode)，发现已经用满(IUsed=100%)，导致系统无法创建新目录和文件






rz:上传文件
sz:下载文件

# 1.查看Linux内核版本命令
     cat /proc/version
     uname -a
# 2. 查看Linux发现版
     lsb_release -a
     cat /etc/redhat-release  # 只适合Redhat系的Linux
     cat /etc/issue
