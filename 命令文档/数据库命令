"""
由于MySQL是单进程多线程模型，一个SQL语句无法利用多个cpu core去执行，这也就决定了MySQL比较适合OLTP（特点：大量用户访问、逻辑读，索引扫描，返回少量数据，SQL简单）业务系统
http://c.biancheng.net/view/7201.html
https://www.runoob.com/mysql/mysql-update-query.html
### 1.mysql数据库
mysql -h 主机名 -u root -p  # 连接mysql

#显示数据表的属性
show columns from user_table;
#显示数据表的详细索引信息
show index from user_table;
#显示数据库runoob所有表的信息
show table status from runoob;
#表名以run开头的表信息
show table status from runoob like 'run%';
#添加mysql用户
insert into user (host,user,password,select_priv,insert_priv,update_priv) values ('localhost','guest',password('guest123'),'Y','Y','Y');
#创建用户
create user 'username'@'host' identified by 'password';
create user 'username'@'%' identified by 'password';

grant all on db_name.* to 'username'@'%';
grant select on db_name.* to 'username'@'%';
grant all on *.* to 'username'@'%';
#删除用户
drop user 'username'@'host';
#修改用户密码
SET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');

#创建数据库并设置字符集和排序规则
create database data_name;
CREATE DATABASE maoyandb CHARACTER SET utf8 COLLATE utf8_general_ci;（或者：create database maoyandb charset utf8;）
CREATE DATABASE caseadmin_new CHARACTER SET utf8 COLLATE utf8_general_ci
#删除数据库
drop database data_name;
#mysql 数据类型：大致三种->数值 日期/时间 字符串(字符)
#创建数据表
create table 'run_tb'(
    'run_id',int unsigend auto_increment,
    'run_title',varchar(100) not null,
    'run_author',varchar(40) not null,
    'sub_data',date,
    primary key('run_id')
)engine=innodb default charset=utf-8;
#删除数据库
drop table run_tb;
#插入数据
insert into table_name(filed1,field2,field3) values(value1,value2,value3)
#查询数据
# order_by sub_date ASC 升序，DESC降序
select * from run_tbl where run_author='菜鸟'''
update run_tb set run_title='学习', where run_id=3;
delete from run_tb where run_id=3;
select * from run_tb where run_title like '%com' #以com结尾
select * from run_tb where run_title like '%com%'# 保护com
#union 连接两个以上的select的语句的结果组合到一个结果集合中 distinct 删除结果集中重复的数据 all返回索引结果集
select country from websites union select country from apps order by conutry;
#使用group by将数据表进行分组，并统计每个name的多少条记录
select name,count(*) from em_tb group by name;

# 创建新表
CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);
# 插入数据
INSERT INTO user_tbl(name, signup_date) VALUES('张三', '2013-12-22');
# 选择记录
SELECT * FROM user_tbl;
# 更新数据
UPDATE user_tbl set name = '李四' WHERE name = '张三';
# 删除记录
DELETE FROM user_tbl WHERE name = '李四' ;
# 添加栏位
ALTER TABLE user_tbl ADD email VARCHAR(40);
# 更新结构
alter table system_info modify column ip varchar(100)
ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;
# 更名栏位
ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;
# 删除栏位
ALTER TABLE user_tbl DROP COLUMN email;
# 表格更名
ALTER TABLE user_tbl RENAME TO backup_tbl;
# 删除表格
DROP TABLE IF EXISTS backup_tbl;
# 清空表
delete from table_name 或 delete from table_name where id=1;
CREATE DATABASE yourdbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;

# 复制n条记录并创建
INSERT into reyo (num,overtime) SELECT num,overtime from reyo where id IN(1,3,5,6,7,9);
INSERT into reyo (`num`,`overtime`) SELECT `num`,`overtime` from reyo where id IN(1,3,5,6,7,9);

# 导出数据mysqldump
# 1.导出整个数据库
mysqldump -u root -p dbname>dbname.sql
# 2.导出表 show variables like '%secure%'查看安全目录
mysqldump -u root -p dbname users>dbname_users.sql
SELECT * FROM runoob_tbl  INTO OUTFILE '/var/lib/mysql-files/Dbug_manangement.txt';

# 3.导入备份的整个数据库
mysql -u root -p < Detector.sql     # 需要再sql文件创建或指定数据库
mysql>source /home/abc/abc.sql      # 进入数据库下use Detector
# 4.插入数据到某个表
load data local infile "/var/lib/mysql-files/CaseUrl.sql" into table CaseUrl;
load data local infile "/var/lib/mysql-files/CaseUrl.sql" into table CaseUrl
(id,name, url, status_code, result, processresult, proposal,@create_time,test_time,case_id) FIELDS TERMINATED BY ', '
set create_time=DATE_FORMAT(@create_time,"%Y-%m-%d %H:%i:%s")




### 2.postgresql数据库
sudo -u postgres psql
sudo su postgres


https://blog.csdn.net/sinat_28371057/article/details/118073218
postgresql:
登录:
 psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432

/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data/  初始化数据库
/usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start

配置数据库允许远程连接访问:
1修改监听地址cd
sudo gedit /etc/postgresql/10/main/postgresql.conf
 #将listen_addresses='localhost'改为listen_addresses='*'
2修改可访问用户的IP段
sudo gedit /etc/postgresql/10/main/pg_hba.conf
 #在文件末尾添加 host all all 0.0.0.0 0.0.0.0 md5 #表示允许任何IP连接

备份：
 pg_dump  –h 127.0.0.1  -p  5432  -U  postgres -c  –f  dbname.sql  dbname
 pg_dump -h 164.82.233.54 -U postgres databasename > C:\databasename.bak
    使用如下命令可对全部pg数据库进行备份：
    pg_dumpall –h 127.0.0.1 –p 5432 -U postgres –c –f db_bak.sql


恢复：
 windows:

  psql -h localhost -U postgres -d new_db  -f "C:/emoneysit.bak"

 ubuntu:

  psql -h localhost -U emmweb -d emmweb < /home/jianghai/Desktop/emmweb.bak 

-h：数据库服务器地址；

-p：数据库端口号；

-U：U 大写,表示用户名；

-d：数据库名称；

-f：把备份文件放在哪里；

\password:设置密码
\q:退出
\l:列出所有数据库
\d:列出当前数据库的所有表格
\d [table_name]:列出某一张表结构
\du:列出所有用户
\h:查看SQl命令的解释，比如 \h select
\?:查看psql命令列表
\c [database_name]:切换数据库
\c - [user_name]:切换用户

修改管理员密码
alter user postgres with password "Isoon@qzmp";

添加数据库新用户
create user centyuan with password '123456';

创建数据库
create database exampledb owner centyuan;

将example数据库所有权限赋予centyuan,否则centyuan只能登录，没有任何数据库操作权限。

grant all privileges on database exampledb to centyuan;



"""