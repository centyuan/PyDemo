nginx配置说明

# 一:server配置
1.root:匹配时:root定义的路径+port后面的路径
http://ww.xxx.com/img/xjj.png
location ^~ /img {
    root /var/www/static/;
}
最终:会找到/var/www/static/img/xjj.png

2.alias:匹配是:alias定义的路径+location匹配部分后面的路径
http://www.xxx.com/img/xjj.png
location ^~ /img {
    alias /var/www/static/images/;
}
最终:会找到 /var/www/static/images/xjj.png

upstream back_server {
    server 127.0.0.1:8001;
    # server unix:///data/sc_api/sc_api/my_sock.sock;
    # proxy_pass http://127.0.0.1:8001;
}
server {
    listern 8000;
    server_name www.centyuan.top centyuan.top;
    charset utf-8;  # 字符集
    access_log  /data/sc_api/logs/my_access.log;
    error_log /data/sc_api/logs/my_error.log;
    client_max_body_size 75M  # 上传最大限制
    loction / {
        root /data/dist;
        index index.html
        try_files $uri $uri/ /index.html;
        # 1.用户请 http://localhost/example时,$uri就是/example
        # 2.在/data/dist/下尝找这个名example的文件($uri表示这个文件) 或 找这个example的目录($uri表示这个目录)
        # 3.前面两个都找不到,内部请求 /index.html
    }
    # 精准匹配
    location = /api/upload_id {
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:8001;
    }
    location /media {
        alias /root/sc_api/media_common;
    }
    location /static {
        alias /root/sc_api/static_common;
        autoindex on;
    }
    location / {
        auth_basic "login";
        auth_basic_user_file /data/passwd.txt
        uwsgi_pass 127.0.0.1:8001;
        include uwsgi_params; #将所有参数都转到uwsgi下
        #uwsgi_pass unix:///data/sc_api/my_sock.sock;
        #proxy_pass http://127.0.0.1:8001;
        """
        fastcgi_pass：将请求传递给 fastCGI 服务器。
        uwsgi_pass：将请求传递给 uwsgi 服务器。
        scgi_pass：将请求传递给 SCGI 服务器。
        memcached_pass：将请求传递给 memcached 服务器。
        """
    }
    error_page 404 /404.html;
    location /404.html {
    }
    error_page 500 502 503 /50x.html;
    location =/50x.html {
    }

}
# 二:ssl cerbot生成证书
server {
    if ($host ==www.example.com){
        return 301 https://$host$request_uri;
    }
    listen 80;
    server_name example.com www.example.com

}
server {
    server_name example.com www.example.com
    client_max_body_size 1024m;

    location / {
        proxy_set_header HOST $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://127.0.0.1:1000/;
    }
    listen 443 ssl;
    ssl_certificate /etc/letsencrypt/live/www.example.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/www.example.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
# 三:全局配置
user root root; # 配置用和用户组
woker_precesses auto; # 允许生成的进程数
pid /run/nginx.pid;
includ /usr/share/nginx/modules/*.con;
events {
    worker_connections 1024;
}
http {
    # 设置日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    # sendfile开启高效文件传输模式,同时搭配二选一:tcp_nopush或tcp_nodelay开启
    # 可防止网络及磁盘I/O阻塞，提升Nginx工作效率
    sendfile            on; # 减少user mode切换到kernel mode,直接在kernel model上做复制
    tcp_nopush          on; # 缓冲区数据装满在发送
    tcp_nodelay         on; # 使缓冲区数据立即发送
    keepalive_timeout   65;
    types_hash_max_size 4096;
}

# 四:location详解
####三种类型location:
精准匹配:location = / {}
一般匹配:location / {}
正则匹配:location ~/ {}
####常用匹配规则:
1.=:精准匹配
2.~:正则匹配,区分大小写
3.~*:正则匹配,忽略大小写
4.^~:开头匹配，匹配成功后，不在匹配其他的。 location ^~ /index/   http://abc.com/index/index.html
####location优先级:
location = 精准匹配
location 完整路径
location ^~
location ~或~*正则匹配
最后交给 / 通配符

# 五:认证配置
####1.生成密码文件 apt install apache2-utilf 或yum install http-tools 或 yum install httpd
htpasswd -cb auth_htpasswd angel lovebeauty3
####2.nginx配置说明
auth_basic "提示信息";
auth_basic_user_file auth_htpasswd;


# 六:禁止php,shell,python
location ~^/images/.*\.(php|php5|sh|pl|py)$
{
    deny all;
}
location ~^/static/.*\.(phh|php5|sh|pl|py)$
{
    deny all;
}
location ~^/data/(attachment|avatar).*\.(php|php5)$
{
    deny all;
}
location ~^/(cadmin|ueditor){
}

# nginx+fastdfs
# https://blog.csdn.net/qq1773304209/article/details/105334920
# https://blog.csdn.net/qq_26545305/article/details/80186385 防盗链(fastdfs采用token方式)

