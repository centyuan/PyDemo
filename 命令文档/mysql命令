mysql:单进程多线程模型,一个SQL语句无法利用多个cpu core
# 一:基本命令
0.查看当前连接数
show global status like 'Thread$';
1.查看当前连接状态
show processlist;
2.数据库连接
mysql -h 主机名 -u root -p
3.添加用户
insert into user (host,user,password,select_priv,insert_priv,update_priv) values ('localhost','guest',password('guest123'),'Y','Y','Y');
4.创建用户
create user 'username'@'host' identified by 'password';
create user 'username'@'%' identified by 'password';
###新创建用户无法登陆问题
use mysql；
delete from user where user='';
flush privileges;
# 对db_name下所有表都有查询(SELECT)权限
grant select on db_name.* to 'username'@'%';
# 对所有表有全部权限
grant all on *.* to 'username'@'%';
5.删除用户
drop user 'username'@'host';
6.修改用户密码
set password for 'username'@'host' = password('123password');
update user set password=password("你的新密码") where user="root";
7.创建数据库病设置字符集和排序规则
create database data_name;
create database data_name character set utf8 collate utf8_general_ci;
8.删除数据库
drop database data_name;

# 二:操作命令
SELECT concat('DROP TABLE IF EXISTS ', table_name, ';')FROM information_schema.tablesWHERE table_schema = 'mydb';
drop table table_name;
1.显示表属性
desc user_table;
show columns from user_table;
2.显示数据表的索引信息
show index from user_table;
3.显示数据库所有以run开头的表信息
show table status like'run%';
4.创建表,engine=指定存储引擎,每张表都可以指定存储引擎
create table 'run_tb'(
    'run_id',int unsigend auto_increment,
    'run_title', varchar(100) not null,
    'run_author',varchar(40) not null,
    'sub_data',date,
    primary key('run_id')
)engine=innodb default charset=utf-8;
5.插入数据
insert into table_name(field1,field2,field3,field4) values(value1,value2,value3,value4);
6.更改字段类型
alter table system_info modify column ip varchar(100) ;
7.更改字段为非空
alter table system_info alter column ip set not null;
8.添加字段
alter table system_info add email varchar(30);
9.删除字段
alter table system_info drop column email;
10.字段改名
alter table system_info rename email to new_email;
11.清空表或删除记录
delete from table_name; 或 delete from table_name where id=1;
12.插入记录
insert into table_name(field1,field2,field3) values(value1,value2,value3);
13.更新记录
update table_name set field2="张三" where id =3;
14.修改表名
alter table table_name rename to new_table_name;
15.模糊查询,%表示任意字符
select *  from Student where name like "%三%"
16.多条件查询and,or
select * from Sudent where age between 18 and 50;
select * from Student where age >18 and age <60 and address='上海'
17.去重
select distinct address from Student;
18.排序:asc升序,desc倒序
select * from Student order by age desc;
19.查询上做计算
select age*3 name from Student;
20.最大max,最小min,平均avg,求和sum,个数count
select count(id) from Student;
21.分组查询 group by 将某一列相同数据视为一组
使用了group by,select后只能跟分组列和聚合函数
查询人数大于3的地区的最大年龄
select address,max(age) from Student group by address having count(*)>3;
22.分页
select * from Student limit 3,5; # 从第三条记录,查询五条
select * from Student limit (n-1)*m,m; # 第n也查询m条记录
23.join连表查询 on 条件
select Sites.id,Sites.name,Log.count,Log.date from Sites inner join Log on Sites.id=Log.site_id;


三: 复制,导入导出数据

# 1.复制n条记录并创建
INSERT into reyo (num,overtime) SELECT num,overtime from reyo where id IN(1,3,5,6,7,9);
INSERT into reyo (`num`,`overtime`) SELECT `num`,`overtime` from reyo where id IN(1,3,5,6,7,9);

# 2.导出整个数据库
mysqldump -u root -p dbname>dbname.sql
# 3.导出表 show variables like '%secure%'查看安全目录
mysqldump -u root -p dbname users>dbname_users.sql
SELECT * FROM runoob_tbl  INTO OUTFILE '/var/lib/mysql-files/Dbug_manangement.txt';
SELECT * FROM users  INTO OUTFILE '/var/lib/mysql-files/users.sql';
# 4.导入备份的整个数据库
mysql -u root -p < Detector.sql     # 需要再sql文件创建或指定数据库
mysql>source /home/abc/abc.sql      # 进入数据库下use Detector
# 5.插入数据到某个表
load data local infile "/var/lib/mysql-files/CaseUrl.sql" into table CaseUrl;
load data local infile "/var/lib/mysql-files/CaseUrl.sql" into table CaseUrl
(id,name, url, status_code, result, processresult, proposal,@create_time,test_time,case_id) FIELDS TERMINATED BY ', '
set create_time=DATE_FORMAT(@create_time,"%Y-%m-%d %H:%i:%s")


# 四:mysql性能优化(四个维度:1.架构,2.硬件,3.DB优化,4.sql优化)
架构:集群读写分离,数据库切分
硬件:高效的磁盘读写性能
DB:参数优化(日志不能笑,缓存足够大,连接够用)
my.ini或my.cnf配置文件
sort/join/read/rnd buffer:4M或8M或16M
tmp/heap table:96M或128M
innodb_flush_log_at_trx_commit:对redo日志刷盘频率的设定
 当取值为 0 的时候，缓冲区的redo log会每秒写入到磁盘的日志文件。但每次事务提交不会有任何影响，也就是 log buffer 的刷写操作和事务提交操作没有关系。在这种情况下，MySQL性能最好，但如果 mysqld 进程崩溃，通常会导致最后 1s 的日志丢失。
 当取值为 1 时，每次事务提交时,缓冲区redo log保证一定会被写入到磁盘的日志文件。这也是默认值。这是最安全的配置，但由于每次事务都需要进行磁盘I/O，所以也最慢。
 当取值为 2 时，每次事务提交时,缓冲区redo log异步写入(不保证)到磁盘的日志文件。这时如果 mysqld 进程崩溃，由于日志已经写入到系统缓存，所以并不会丢失数据；在操作系统崩溃的情况下，通常会导致最后 1s 的日志丢失。
sync_binlog:binlog刷盘的频率
######innodb_flush_log_at_trx_commit和sync_binlog设置为1来保证主库和主从库的一致性
long_query_time:sql执行时间限制
interactive_timeout:交互模式下超时时间,五分钟或十分钟
lock_wait_timeout:表锁锁定时间
time_zone:使用datetime减少性能消耗
wait_timeout:程序连接mysql超时时间,五分钟或十分钟
innodb_buffer_pool_size:缓冲池大小(越大,磁盘I/O减少)2个G左右
innodb_buffer_pool_instances:配置多个缓冲池实例
tmp_table_size:临时表的最大大小

explain检查sql语句
sql优化:
1.合理使用索引,避免索引失效
2.使用UNION ALL(不去重,所有数据)替代UNION(去重后)
3.多用limit
4.用连接查询代替子查询
5.选择合理的字段类型
6.join表不宜过多

### 索引失效情况

(1)like以%开头索引无效(当like以%结尾索引有效)
(2)当or语句查询条件的前后列均为索引时,索引生效
(3)组合索引,使用的不是第一列索引时候即最左匹配规则
(4)对索引字段进行计算操作(where id-1=10)函数操作时不会使用索引
(5)数据类型出现隐式转换,如varchar不加单引号的时候可能会自动转换为int类型,这个时候索引失效(where条件上进行了类型转换,比如字段是字符串类型,却填上数字)
(6)在索引列上使用IS NULL或者 IS NOT NULL 时候，索引失效，因为索引是不索引空值得
(7)在索引字段上使用，NOT、 <>、！= 、时候是不会使用索引的，对于这样的处理只会进行全表扫描
(8)当全表扫描速度比索引速度快的时候不会使用索引
(9)使用了select *(不会走索引,大量的回表操作)


# 五:索引详解
操作系统和内存:最小单位是页page
操作系统和磁盘:最小单位是块block
磁盘I/O:文件系统每次读取一块(默认4K)单位大小到内存
mysql:存储数据以页(page默认16k)为单位,mysql读取一页页读取
1.索引演化史?
二叉查找树->AVL平衡二叉树->B-Tree(多路平衡查找树)->B+Tree
B-Tree:多路平衡查找树,每个节点包含多对(父节点指针,子节点指针,键key,值data),相比于AVL缩减了节点数,减少了树的高度
B+Tree:非叶子节点(双向链表)只存储键值+叶子节点指针,值data顺序存在同一层的叶子节点上,相比于B-Tree每个节点能存储更多的key,减少了树的高度和磁盘I/O次数
通过非叶子节点的二分查找以及指针确定数据在哪个页中,进而去数据页查找数据
一般高度为1-3:叶子节点16k(一条数据一般1k)存16条数据,非叶子节点存1170个指针=1170*1170*16=21902400
2.什么是索引?
对一列或多列值进行排序的数据结构()
3.mysql有哪些索引?那些字段可以建立对应索引?
主键索引(聚簇索引,唯一索引unique唯一且不为NULL),复合索引(最多包含16列:where多条件最左原则),全文索引(char、varchar，text 列上可以创建全文索引,一般不使用,不是mysql专长)
普通索引,空间索引(对空间数据类型字段建立索引,mysql有四种:GEOMETRY,POINT,LINESTRING,POLYGON)
4.聚集索引和非聚集索引区别?
都是B+Tree数据结构
聚簇索引:叶子节点存储索引和数据,找到索引就找到数据(其他为辅助索引,存储索引id,没有去覆盖索引的话要回表查找主键索引找到数据)。
非聚簇索引:叶子节点存储索引和数据行的地址,根据索引找到数据行的位置在去磁盘取出数据。
5.什么是回表?
通过非主键索引查询,select所获取的字段不能通过非主键索引获取到,需要回表查询主键索引。
5.覆盖索引,非覆盖索引?
覆盖索引:只差索引,不要其他数据
6.什么是索引下推?
where多条件判断,对索引中包含的字段先做判断,再去回表没有索引的字段(减少回表次数)
7.什么情况下不推荐使用索引?
数据唯一性差(比如性别只有两种数据)
频繁更新的字段不用索引
字段不在where语句后出现(where含IS NULL/IS NULL/IS NOT NULL/like "%"等,不用索引)


InnoBD主键索引采用B+的聚簇索引:
每个InnoDB表都有且只有一个特殊的索引，称为聚簇索引 ，用于存储行数据。通常，聚簇索引与主键同义 。
(1)表定义了主键,则pk就是聚集索引
(2)没有定义主键,第一个非空唯一索引列就是聚集索引
(3)否则,InnoDB会创建一个隐藏的row-id作为聚集索引
MyISAM索引采用B+的非聚簇索引:不存储全部数据,只存储聚集索引的值(一般为id)

# 六:InnoDB和MyISAM区别
MyISAM:不支持事务,支持表级别锁(限制了读/写的性能),,拥有较高的插入和查询速度,B+的非聚簇索引,通常用于只读或以读为主的场景.
怎么快速向数据库插入100万条数据?先用MyISAM插入数据,然后修改存储引擎为InnoDB
InnoDB:支持事务,支持行/表级别锁,/外键(数据的完整性和一致性更高),采用B+的聚簇索引,通常用于经常更新的场景.

# 七:mysql预编译(sql执行前会进行解析和校验),参数带入
益处:加快执行速度,防止sql注入
场景:SQL语句一样,参数不一样,可以对SQL语句预编译
sql语句执行流程:
连接层->服务层->引擎层->存储层
sql语句->查询缓存(默认关闭不推荐使用,sql语句必须相同,切表数据表动大)->语法解析预处理器(检查是否有语法错误)->优化器->执行器
语法:prepare name from statement;
1定义.prepare statement_1 from 'select * from user where id=?'; # 通过?进行占位
2参数.set @id=2;
3执行.execute statement_1 using @id;
怎么预防sql注入？
1.不信任用户提交的数据(参数过滤,严格检查参数类型,转义,限制长度)
2.mysql预编译(参数化查询,变量绑定)

# 八:mysql acid实现原理
原子性(Atomicity):(undo log回滚日志实现)指一个事务不可分割,是一个最小的操作单元(包含若干个操作),要么全部成功,要么全部失败
隔离性(Isolation):(锁和mvcc实现)多个事务并发执行,事务之间相互隔离
持久性(Durability):(redo log实现)InnoDB提供了一个缓存Buffer,读取和写入都先在Buffer中(并同时把操作记录到redo log,防止数据丢失)
为什么将redo log的数据写到磁盘比将Buffer数据持久化到磁盘要快？
1.Buffer数据持久化是随机写I/O,redo log是追加,顺序IO
2.Buffer数据持久化是以页page为单位,redo log只需要写入的真正部分(减少了无效I/O)
一致性(Consistency):数据处于合法状态(满足预定约束就是合法)
从数据库层面，数据库通过原子性、隔离性、持久性来保证一致性。也就是说ACID四大特性之中，C(一致性)是目的，A(原子性)、I(隔离性)、D(持久性)是手段，是为了保证一致性，数据库提供的手段。数据库必须要实现AID三大特性，才有可能实现一致性。
从应用层面，通过代码判断数据库数据是否有效，然后决定回滚还是提交数据。

# 九:binlog
概念:是记录所有表结构变更(create/alter table)以及表数据修改(insert/update/delete)的操作
不会记录select/show,这类对数据本身没有修改的操作
三大作用:
恢复:
复制:1.主库log dump线程将bin log 传给从库。2.从库I/O线程接受bin log并写入relay log,SQL线程从relay log读取并写入数据库
审计:
修改profile
#### 大量外键问题:
不影响select，影响update/insert/delete(当对子表进行写入操作,父表会被加上共享锁,对子表进行高并发时,父表的共享锁长时间不能释放,就不能对父表进行写入而只能读)

# 八:WAL技术(Write-Ahead Logging)RedoLog(对所有页面的操作写入日志文件,实现事务的持久性)
Buffer Pool(Log Buffer)


