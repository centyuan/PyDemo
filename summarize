lass基础架构即服务
pass平台即服务
sass软件即服务
东方证券
中信建投
华夏基金
海通证券
中金财富
湘财证券


git hook:
  客户端钩子: pre-commit,prepare-commit-msg,commit-msg,post-commit 
  服务器钩子: pre-receive,post-receive,update
  直接使用 git pre-commit 工具  pip install pre-commit 

《8 号 Python 增强规范》（Python Enhacement Proposal #8），简称PEP8:针对代码格式而编订的python代码指南
Google Style
项目管理：
  PDM：python包和依赖管理工具
  Black(Formatter)：python官方推出来的用于检查代码是否复合PEP8规范, 自动修复，代码格式化
  ruff(Linter): 使用Rust编写的超快Python静态分析工具，性能远超flake8和pylint (对代码语法词法进行扫描分析，有效定位代码缺陷并及时纠正问题,引入了不被使用的代码)
      
 mypy: 静态类型检查
 flake8: 检查代码格式/语法/逻辑错误,只提示不修改
  
1：总结技术栈和关键技术
   vscode作为开发环境,PDM项目管理, 构建工具make,Dockerfile镜像构建,GitLab ci/cd打包使用Black代码格式还，使用ruff进行linter，静态分析
   fastapi,
2：总结项目经验
https://zhuanlan.zhihu.com/p/584541699

####中信建投证券 Alpha Digital Lab 人工智能大类资产配置系统 #### 
人工智能大类资产配置系统主要由投资研究和运营平台两大功能组成，其中投资研究包括：公募基金市场，公募基金分析和我的研究三部分功能；运营平台主要包括用户管理和群组管理等
按基金的股票brison和股票barra两个方面对基金进行基金业绩归因分析：
​1.股票型Brinson归因分析
2.股票Barra归因分析
地址https://alphadig.csc108.com/login
  业绩归因的方法和意义:
  为什么需要业绩归因？
      持续获取稳健和丰厚的投资收益，是投资者的需求，也是基金管理人的目标
 引进国际国内先进的业绩归因分析业绩归因就是业绩的来源，将组合的收益归结到一系列风险因素上，找准风险因素并确定风险暴露程度,才能调整投资规划和投资策略，,有助于优化投资决策，帮助基金经理改善投资管理能力，从而提高业绩能力
业绩归因脱胎于有效市场理论的实证研究,是对基金超额收益的定量归因分析，基于基准组合,对投资组合的表现给与解释,以挖掘超额收益的来源，观察超额收益是否长期稳定可持续。并用来评价基金的超额收益来自基金经理的主动管理能力还是运气
总的来讲,业绩归因与各项业务的融合,有助于控制规模风险，辅助基金经理能力出圈,培养稳定的投资风格专业团队，也引入业绩归因识别优秀的基金经理和研究员
 如何进行业绩归因？
 按照原始数据类型,基金业绩归因的方法可以分为
  1.持仓法:
     Brinson模型，BF模型(单期和多期)，基于持仓股票的多因子分析
  2.净值法:
     选股择时模型(T-M模型),因子模型(Fama-French三因子模型),风格配置模型(夏普风格分析模型)
不同类型基金的业绩归因分析都是基于以上两种思路，在具体模型上会存在差异，具体包括：

对于债券型基金：持仓法是关注基金在久期配置、利率风险暴露方面的选择；净值法中选择的风格因子主要包括水平因子、期限因子、信用风险因子等。
对于股票型基金：持仓法是关注资产配置贡献、行业配置贡献、个股选择贡献等；净值法中的风格因子则包括风格选择能力（成长/均衡/价值）和选股能力

按照业务的不同目的,基金业绩归因的目的可以分为
     业绩拆分:考察投资组合相较于选取的基准在权重配置和股票选择上存在的差异，认为这样的差异是获得与基准不同收益的原因，可以用常见的Brinson模型实现
     因子分析:基于多因子模型考察投资组合在各风险因子上的暴露程度，可以用多因子模型实现，即多因子个股风险模型在投资组合中的应用
      风格分析:
 一般来讲,基金的评价体系可以从业绩优劣,业绩稳定性,综合评价三方面进行:
业绩优劣：收益、风险、风险调整收益
业绩稳定性：收益稳定性、风格稳定性
综合评价：成本调整收益


#### 中信建投证券 alpha caputre系统(alpha capture system) ####
收集和跟踪投资观点表现的商业系统，一般称为alpha捕获系统
地址:https://bigalphacapture.com/
1. 观点创建
     一:用户提交观点(新增观点基本信息(证券代码，证券名称，预期价格，初始仓位,基准代码，开启日期,关闭日期),查询基准代码,查询证券名称)
     二:生产观点委托记录(根据当前时间确定交易日，第一次创建需要资金表)
2. 每日结算任务Airflow
     一: 当日历史数据准备(股票数据，申万指数数据，分红送股数据)
     二: 当日委托数据，上日资产数据，
     三: 结算:上日资产+今日交易=今日资产,对昨日持仓进行除权除息处理，根据委托记录生产成交明细，账户组合绩效统计，结算记录写入数据库
        加载全局行情数据
        加载上日资金和持仓
        加载当日委托记录
        根据当日委托记录和行情，得到当日成交记录
        根据成交记录，更新资金和持仓，以及费用、市值、收益、持仓成本价等
        组合绩效计算

#### 湘财量化交易平台-湘财-BQ平台 ####
https://bigquant.xcsc.com/
是一套从投研回测，到模拟交易，到实盘交易的人工智能量化平台，由bigquant提供行情和因子数据
   实盘依赖bigquant平台，该平台主要负责进行策略开发和模拟交易，数据清洗和因子构建,在将策略导入到湘财量化交易平台进行关联，进行策略实盘交易
bigquant进行数据构建(数据源如:wind)->数据拉取(湘财-BQ平台)->策略执行并产生调仓信号->写到交易数据库->oms订单执行下单->湘财锋速自研服务器
服务模块包括:
网站服务模块(bignginx,bigweb)
增量数据更新服务(bigdataclient):每个交易日19点从bigquant拉取增量的历史行情和因子数据
投研回测模块(bigjupyterhub)
模拟交易模块(papertrading,bigngscheduler)
交易登录查询模块(tradeapiservice)
交易执行模块(bigomsservice):负责日线级别的交易信号的自动委托,交易信号从数据库拉取,创建不同的oms实例对象
数据库(postgresql)
信号队列模块(rabbitmq)

oms优化:
  对每个账号起一个python线程负责交易,由于GIL原因,性能较低
  1.没有交易信号的不启动线程
  2.采用多进程
  3.启动多pod，每个pod负责一个资金账号的交易

实盘交易:
   历史增量行情更新完成
   资产数据从柜台同步到量化平台数据库(只同步本平台的资金账号数据)
   定时检测到数据同步完成后,会自动触发实盘策略绩效清算(界面上可以看到实盘策略的收益曲线和相关指标)
   绩效清算后,会自动触发实盘交易策略的运行,并产生T+1日的交易信号,并持久化到数据库

tradeapiservice 交易接口服务，该服务会访问锋速UF2.0服务和密码中心服务，该服务只对内提供登录、资金持仓、持仓查询、委托查询，和密码中心访问等功能，不对外部提供服务功能。
bigomsservice 交易执行服务，该服务负责执行各实盘的交易信号，即按各实盘交易信号规则然后发出实际委托，当然也会依赖于锋速实时行情。服务运行规则：每日早上8:30分左右，会加载数据库中的交易信号，并监听用户确认交易信号的操作，用户确认信号时会采集所操作机器的op_station，然后通过访问密码中心获取各实盘账号的密码，并向锋速UF2.0交易服务发起连接登录请求，然后正常执行已确认过的交易信号，未确认过的，不会发出委托。
   
   
系统拓扑图
资产数据同步服务
实盘数据流导向图
湘财实盘交易图
湘财实盘交易模块设计
清算服务
策略自动同步设计
OMS服务：主要负责日线级别交易信号的自动委托

湘财-BigQuant平台使用密码中心服务的流程：
用户 →> 登录成功 →> bigweb判断该用户创建实盘交易有实盘策略 →> 将密码发送至密码中心保存该账号密码 →> 结束
oms服务启动 →> 读取实盘交易信息 →> 从密码中主获取各账号交易密码 →> 向锋速UF2.0接口发起登录请求 →> 登录成功则开始自动交易


本平台主要提供只能选股策略，以及半自动化托管交易的功能服务
下面说明策略交易信号产生逻辑,以及交易信号的执行和交易柜台的交互功能说明
交易信号的产生主要取自于策略，不同策略使用了不同的因子数据,比如资金流因子,财报因子，价量因子,且平台上的策略均为日频级的选股策略,T日会根据用户资金及持仓产生T+1的所买卖的股票，信号产生的买卖时间点主要是在开盘或收盘时（大多策略默认是在开盘时买入，快收盘时卖出，当然用户可手动调整策略买入和卖出的时间点）。
因子数据/历史行情数据/账户资金+持仓数据->策略运行预测下一日买入的股票->策略根据调仓逻辑和可用资金,产生交易信号(每个交易信号包含委托时间、股票代码、买卖方向、委托数量、委托价格、委托类型、用户终端站点信息等)

系统各节点说明：

前提：所有服务以pod形式运行，每个pod运行可能是基于不同的镜像，每个镜像包含了该服务运行的所有依赖及条件（就是一个已打好包一样，如回测服务，已装好了回测环境及所需要的各python包）。PaaS平台保证了各服务的高可用性，也能够查看当前正在运行的pods及其状态，PaaS平台不仅管理着集群内的各个服务，还管理着硬件资源，如新增/删除node节点，也能看到集群内硬件资源当前占用情况。



bigdataclient：增量数据更新服务，该服务每日会定时向宽邦数据服务器发送检查更新指令，若宽邦数据更新（宽邦一般在交易日当天17~18点完成增量数据构建），则会自动将增量数据（行情数据，因子数据）写到平台的数据表中（每个数据表是落地到磁盘上的数据文件）。数据更新后，系统便可以使用该数据了，如在投研回测环境中能读取到今日增量的数据。数据更新有3次重试 如果3次都更新失败了会返回失败异常信息，这个信息是反馈给我们这边的数据服务，我们的数据服务会发消息给微信提醒有数据更新失败，最后需要手动处理
bigjupyterhub: 投研回测中心服务，即为网站“编写策略”页面的python开发环境提供服务，运行python代码（数据读取，数据计算，回测，画图等python功能）。但每个用户的策略开发环境，会对应一个pod服务，该pod服务提供了回测所需的所有功能，以及管理回测所需的硬件资源（CPU，内存，磁盘），如高级用户可以配置更多的CPU和内存。
bigjupyteruserservice：为集群内各服务环境间提供接口接口访问服务。
bigweb: 网站web后台服务，如为用户提供登录服务，查看/管理模拟交易，查看/管理实盘功能，平台文档等，用户相关操作也会记录到数据库中。
postgres: 数据库服务，该服务内包含多个数据库空间，如模拟交易数据库(bigquant_liverun，存储了模拟交易信息，如基本信息，每日信号，每日持仓，每日绩效等)，实盘交易数据库等(livetrading，存储了实盘策略信息，账户 资金、持仓、委托，实盘设置参数等)，实盘绩效数据库(performance，存储了每个实盘的绩效数据，如账户级别和各策略级别的收益曲线，shapre指标)。向平台提供数据持久化功能，该数据库现在是由平台定时任务触发执行每日定时备份，参考 《量化交易平台-数据库备份文档》。
bignbscheduler: 模拟交易/实盘交易策略调度运行服务，由aiflow管理工具触发调度指令到该服务，该服务会根据指令为每个用户的每个策略创建一个pod服务进程，该pod服务进程可以paas管理页面查看到，但其策略运行完成后，pod进程会自动退出。该服务为每个pod服务提供了pod运行所需要的镜像以及运行参数等，pod运行时，会从数据库加载策略（策略中再加载策略所需要的数据，如该策略当前运行时的资金和持仓，策略所依赖的行情数据和因子数据），运行策略逻辑（包括模型训练、预测）等，生成交易信号并写入数据库，模拟交易和实盘交易均会写，只是会写到不同的数据表中。
bignbscheduler-repo: 模拟交易策略和运行日志存储服务。
bigpapertradingservice: 模拟交易绩效数据存储和查询服务。
tradeapiservice: 为平台内的服务提供除委托指令外的交易相关服务（现主要是为bigweb服务），我们设计为bigweb服务等不直接使用券商api访问相关服务，由该服务做中转，这样更统一更安全。提供了实盘账户的交易通道相关功能，如交易登录、资金查询、持仓查询、密码中心访问等，因此该服务需要配置一个或多个锋速UF2.0站点服务器地址，和密码中心服务器地址（注意还需要配置密码中心服务证书，并将服务所在机器的mac地址加到密码中心的白名单中）。用户打开网页 → 输入资金账号+密码点击登录 → bigweb做基本判断后请求给 → tradeapiservice收到请求 → 向名锋速UF2.0请求登录 → 返回登录结果给bigweb → 返回前端，登录成功则跳转到成功页面。
bigomsservice: 交易信号执行服务，即每个交易日，该会从数据加载各实盘信息，然后从密码中心获取各实盘账户的密码，加载当日交易信号，登录到锋速服务器（包括交易和行情）。并在交易时间段内根据交易信号（每个交易信号包含委托时间、股票代码、买卖方向、委托数量、委托价格、委托类型、用户终端站点信息等），委托时间到达则发出委托指令（现在只有限价指令），注意这只会发送出用户已确认的交易信号。交易信号发送前会有基本的风控检查：资金检验、持仓可用、委托发送频率控制等。委托操作均会记录到数据库trading_logs表中（主要是记录哪个账号在什么时候发送了什么委托，委托执行结果成功还是失败），委托失败也会在前端页面上展示失败原因。该服务除了接锋速UF2.0交易站点外，还接了锋速行情站点（可配置多个，每个站点会建立一个连接，接当前平台所有实盘的股票实时行情）
rabbitmq: 队列服务，由于用户在开盘前可能会修改信号，如取消某股票有利空消息的买入信号，如修改委托数量/委托价格等，修改后需要通知bigomsservice服务以更新交易指令，所以这里采取rabbitmq可靠消息队列。
redis: web网站缓存服务，为web后台提供缓存机制，提高访问性能。
mongodb: 存储了平台数据的一些元信息，便于数据可以快速定位到磁盘数据。
zxtrader-dbservice: 数据库访问服务，主要是对策略运行时，需要保存数据到数据库时，防止策略可直接操作数据库而提供的中间服务。主要提供了策略数据读取，策略信号保存等数据库功能接口。
aiflow: 平台任务管理工具，如模拟交易策略调度任务，实盘清算任务（收到柜台推送过来的实盘资产数据后运行），实盘策略调度任务等，可参考《AIFlow使用文档》。
databuilder: 数据构建服务，用户将每日新增数据构建到平台中（如数据更新写入），用户则可能通过我们的数据接口DataSource访问到新数据。
jupyter-xxx-pod: 用户开发环境服务，每一个正在策略开发环境，进行投研和回测的用户，都对应一个用户pod，用户。


系统容量评估：

web网站用户量，和同时在线用户量概念不同，主要取决于硬件资源，按现在生产环境标准，可以支持10W+用户
同时在线做回测的用户，一是该平台主要用于做交易，二是机器资源有限，三台机器总约80核心cpu和374G内存，除去系统本身所占资源，按每个用户占1cpu和2G内存，同时在线用户最大支持100+。
同时在进行的模拟交易和实盘交易，由于该类资源属于动态调度，磁盘空间不是瓶颈，按每策略运行时间20分钟，50个并发运行。1000个策略则需要 1000 * 20  / 50 = 400分钟，约7小时运行完成。需要在早上9点前完成，一般一个用户2~5个策略，因此推断目前支持200+用户进行实盘。
#### 东方证券--期货资金管理系统  ####
