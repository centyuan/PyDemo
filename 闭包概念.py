#！/usr/bin/python3
# -*- coding:utf-8 -*-
# author centyuan
# @time 19-4-11 上午10:30

"""
闭包：
在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。

一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。
但是闭包是一种特殊情况，
如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。
"""

def outer(a):
    b=10
    def inner():
        print(a+b)
    return inner



if __name__=='__main__':
    demo=outer(6)
    demo()
#demo存了外函数的返回值，也就是inner函数的引用，这里相当于执行inner函数
#函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数
#一个函数，如果函数名后紧跟一对括号，相当于现在我就要调用这个函数，
# 如果不跟括号，相当于只是一个函数的名字，里面存了函数所在位置的引用。