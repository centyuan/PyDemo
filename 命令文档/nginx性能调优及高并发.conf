### https://juejin.cn/post/6895660634466156558
### http://tengine.taobao.org/book/chapter_02.html

# 一:nginx层面优化
worker_processes  1; # 1.nginx进程数，一般设置cpu的核心数或核心数X2，一般为它的倍数,
worker_rlimit_nofile 20480; # 2.一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx 进程数相除，但是nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致
events {
    use epoll;                 # 3.使用epoll的I/O模型
    worker_connections 10240;  # 4.每个进程允许的最多连接数,理论上每台nginx 服务器的最大连接数为worker_processes*worker_connections
    multi_accept on;           # 5.设置网路连接序列化，防止惊群现象发生，默认为on
}
http {
    keepalive_timeout 0;       # 6.禁用keepalive_timeout或设置较低值(60)
    gzip on;       # 7.开启压缩功能
    gzip_min_length  1k; #表示允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩，建议设置成大于1K。如果小于1K可能会越压越大
    gzip_buffers     4 32k; #压缩缓存区大小
    gzip_http_version 1.1; #压缩版本
    gzip_comp_level 6; #压缩比率， 一般选择4-6，为了性能gzip_types text/css text/xml application/javascript;　　#指定压缩的类型 gzip_vary on;　#vary header支持

    proxy_connect_timeout 90; # 8.proxy超时设置
    proxy_send_timeout  90;
    proxy_read_timeout  4k;
    proxy_buffers 4 32k;
    proxy_busy_buffers_size 64k
    # sendfile开启高效文件传输模式,同时搭配二选一:tcp_nopush或tcp_nodelay开启
    # 可防止网络及磁盘I/O阻塞，提升Nginx工作效率
    sendfile on; # 9.开启高效文件传输模式。
    tcp_nopush on; # 需要在sendfile开启模式才有效，防止网路阻塞，积极的减少网络报文段的数量。将响应头和正文的开始部分一起发送，而不一个接一个的发送。
    tcp_nodelay         on; # 使缓冲区数据立即发送
    sendfile_max_chunk 100k; # 10.每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。
        upstream my_back {
        server 127.0.0.1:7878;
        server 192.168.10.121:333 backup;# 热备
    }
    server {
        keepalive_requests 120; # 单连接请求上限次数

    }
}
worker_cpu_affinity auto; # 1   0. cpu的亲和配置


# 二:系统层面
# 调整同时打开文件数量ulimit针对当前shell的当前用户
ulimit -n 20480                    # 1.shell级限制
vim /etc/security/limits.conf      # 2.用户级限制
vim /proc/sys/fs/file-max          # 3.系统级别限制
# TCP最大连接数
echo 10000 > /proc/sys/net/core/somaxconn
# TCP连接立即回收、回用（recycle、reuse）
echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
echo 1 > /proc/sys/net/ipv4/tcp_tw_recycle
# 不做TCP洪水抵御
echo 0 > /proc/sys/net/ipv4/tcp_syncookies

可以直接使用优化后的配置，在/etc/sysctl.conf中加入：
# TCP最大连接数，每一个端口最大的监听队列的长度,默认128，负载要求很高（并发要求很大）的服务程序的要求是远远不能满足的
net.core.somaxconn = 2048
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 4096 16777216
net.ipv4.tcp_wmem = 4096 4096 16777216
net.ipv4.tcp_mem = 786432 2097152 3145728
net.ipv4.tcp_max_syn_backlog = 16384
net.core.netdev_max_backlog = 20000
net.ipv4.tcp_fin_timeout = 15
net.ipv4.tcp_max_syn_backlog = 16384、
# tcp连接重用
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_tw_recycle = 1
# 不抵御洪水攻击
net.ipv4.tcp_syncookies = 0
net.ipv4.tcp_max_orphans = 262144  #该参数用于设定系统中最多允许存在多少TCP套接字不被关联到任何一个用户文件句柄上，主要目的为防止Ddos攻击
vm.swappiness = 10 #物理内存剩下10%时使用虚拟内存
使用：sysctl -p 生效
sysctl -p


# 总限制文件句柄数
cat /proc/sys/fs/file-max
# 当前使用的文件句柄数
cat /proc/sys/fs/file-nr
# 修改
vim /etc/security/limits.conf
（*表示所有用户、soft表示可以超出，但只是警告；hard表示绝对不能超出，unlimited用于表示不限制）

